export declare class LDUnexpectedResponseError extends Error {
    constructor(message: string);
}
export declare class LDClientError extends Error {
    constructor(message: string);
}
export declare class LDTimeoutError extends Error {
    constructor(message: string);
}
/**
 * Check if the HTTP error is recoverable. This will return false if a request
 * made with any payload could not recover. If the reason for the failure
 * is payload specific, for instance a payload that is too large, then
 * it could recover with a different payload.
 */
export declare function isHttpRecoverable(status: number): boolean;
/**
 * Returns true if the status could recover for a different payload.
 *
 * When used with event processing this indicates that we should discard
 * the payload, but that a subsequent payload may succeed. Therefore we should
 * not stop event processing.
 */
export declare function isHttpLocallyRecoverable(status: number): boolean;
//# sourceMappingURL=errors.d.ts.map