/// <reference types="node" />
import { EventEmitter } from 'events';
import { LDClientImpl } from '@launchdarkly/js-server-sdk-common';
import { BigSegmentStoreStatusProvider, LDClient } from './api';
import { LDOptions } from './api/LDOptions';
/**
 * @ignore
 */
declare class LDClientNode extends LDClientImpl implements LDClient {
    bigSegmentStoreStatusProvider: BigSegmentStoreStatusProvider;
    emitter: EventEmitter;
    constructor(sdkKey: string, options: LDOptions);
    on(eventName: string | symbol, listener: (...args: any[]) => void): this;
    addListener(eventName: string | symbol, listener: (...args: any[]) => void): this;
    once(eventName: string | symbol, listener: (...args: any[]) => void): this;
    removeListener(eventName: string | symbol, listener: (...args: any[]) => void): this;
    off(eventName: string | symbol, listener: (...args: any) => void): this;
    removeAllListeners(event?: string | symbol): this;
    setMaxListeners(n: number): this;
    getMaxListeners(): number;
    listeners(eventName: string | symbol): Function[];
    rawListeners(eventName: string | symbol): Function[];
    emit(eventName: string | symbol, ...args: any[]): boolean;
    listenerCount(eventName: string | symbol): number;
    prependListener(eventName: string | symbol, listener: (...args: any[]) => void): this;
    prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): this;
    eventNames(): (string | symbol)[];
}
export default LDClientNode;
//# sourceMappingURL=LDClientNode.d.ts.map