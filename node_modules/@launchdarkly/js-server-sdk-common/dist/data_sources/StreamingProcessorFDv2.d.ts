import { ClientContext, internal, LDHeaders, subsystem as subsystemCommon } from '@launchdarkly/js-sdk-common';
export default class StreamingProcessorFDv2 implements subsystemCommon.DataSource {
    private readonly _streamUriPath;
    private readonly _parameters;
    private readonly _diagnosticsManager?;
    private readonly _streamInitialReconnectDelay;
    private readonly _serviceEndpoints;
    private readonly _headers;
    private readonly _logger?;
    private _eventSource?;
    private _requests;
    private _connectionAttemptStartTime?;
    private _initMetadata?;
    constructor(clientContext: ClientContext, _streamUriPath: string, _parameters: {
        key: string;
        value: string;
    }[], baseHeaders: LDHeaders, _diagnosticsManager?: internal.DiagnosticsManager | undefined, _streamInitialReconnectDelay?: number);
    private _logConnectionAttempt;
    private _logConnectionResult;
    /**
     * This is a wrapper around the passed errorHandler which adds additional
     * diagnostics and logging logic.
     *
     * @param err The error to be logged and handled.
     * @return boolean whether to retry the connection.
     *
     * @private
     */
    private _retryAndHandleError;
    start(dataCallback: (basis: boolean, data: any) => void, statusCallback: (status: subsystemCommon.DataSourceState, err?: any) => void, selectorGetter?: () => string | undefined): void;
    stop(): void;
    close(): void;
}
//# sourceMappingURL=StreamingProcessorFDv2.d.ts.map